function finder_edit() {
  find -name "*$@*" -type f | fzf --preview 'cat {}' | xargs vim 
}

function finder() {
  find -name "*$@*" -type f | fzf --preview 'cat {}'
}

function kill_finder() {
  ps -fea | fzf | awk '{print $2}' | xargs kill -9
}

function ctagReferences(){
  ctags -R --exclude=.git
}

function search_history(){
  local selected_command=$(fc -rl 1 | awk '{$1="";print substr($0,2)}' | sort | uniq | fzf --border --color=bg+:24)
  LBUFFER=$selected_command
}

zle -N search_history
bindkey '^f' search_history

zle -N finder
bindkey '^e' finder

function git_fetch_all_branch() {
    remote_name="$1"
    git stash
    git remote update "$remote_name" 2>/dev/null

    for branch in `git branch -r | grep "$remote_name/" | grep -v HEAD`; do
        git branch --track --force "${branch##*/}" "$branch" 2>/dev/null
    done
    git stash apply
}

function git_search_log(){
  git log --graph --color=always --no-merges \
    --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"  | \
    fzf --ansi --no-sort --reverse --tiebreak=index --preview \
    'f() { set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}"); [ $# -eq 0 ] || git show --color=always $1 ; }; f {}' \
    --bind "j:down,k:up,alt-j:preview-down,alt-k:preview-up,ctrl-f:preview-page-down,ctrl-b:preview-page-up,q:abort,ctrl-m:execute:
      (
        grep -o '[a-f0-9]\{7\}' | head -1 |
        xargs -I % sh -c 'git show --color=always % |
        less -R'
      ) << 'FZF-EOF' {} FZF-EOF" --preview-window=right:60%
}

function docker_stop_all(){
  echo -e "\e[94m"
  docker ps
  echo -e "\e[92mCONTAINER ID\e[93m"
  docker ps | awk '{print $1}' | xargs docker stop
  echo -e "\e[39m"
}

function cd() {
  if [[ "$#" != 0 ]]; then
    builtin cd "$@"
    return
  fi

  while true; do
    local lsd=$(echo ".." && ls -p 2>/dev/null | grep '/$' | sed 's;/$;;')
    local dir="$(printf '%s\n' "${lsd[@]}" | fzf \
      --height=60% \
      --layout=reverse \
      --border=rounded \
      --info=inline \
      --prompt='📁 Directory: ' \
      --header='🚀 Navigate directories (ESC to exit, ENTER to select)' \
      --preview-window='right:50%:wrap' \
      --preview "
        __cd_nxt={};
        if [[ \$__cd_nxt == \"..\" ]]; then
          __cd_path=\$(dirname \"\$(pwd)\");
          echo \"📂 Parent Directory: \$__cd_path\";
        else
          __cd_path=\"\$(pwd)/\$__cd_nxt\";
        fi;
        echo \"📍 Path: \$__cd_path\";
        echo;
        if [[ -d \$__cd_path ]]; then
          echo \"📄 Contents:\";
          ls -la --color=always \$__cd_path 2>/dev/null | head -20;
        else
          echo \"❌ Directory not accessible\";
        fi
      " \
      --bind 'ctrl-h:toggle-preview' \
      --bind 'ctrl-u:preview-page-up' \
      --bind 'ctrl-d:preview-page-down' \
      --bind 'ctrl-y:execute-silent(echo -n {q} | pbcopy)' \
      --color='fg:#ebdbb2,bg:#282828,hl:#fabd2f,fg+:#ebdbb2,bg+:#3c3836,hl+:#fabd2f' \
      --color='info:#83a598,prompt:#bdae93,spinner:#fabd2f,pointer:#83a598,marker:#fe8019,header:#665c54')"

    [[ ${#dir} != 0 ]] || return 0

    if [[ "$dir" == ".." ]]; then
      if ! builtin cd ..; then
        echo "❌ Cannot navigate to parent directory" >&2
        continue
      fi
    else
      if ! builtin cd "$dir" 2>/dev/null; then
        echo "❌ Cannot access directory: $dir" >&2
        continue
      fi
    fi

    echo "📍 Current directory: $(pwd)"
  done
}

function cdf() {
  local dir

  {
    echo ".."
    ls -p 2>/dev/null | grep '/$' | sed 's;/$;;'
    # Si tienes z o fasd instalado, puedes agregar:
    # z -l 2>/dev/null | awk '{print $2}' | grep -v "^$(pwd)$"
  } | fzf \
    --height=70% \
    --layout=reverse \
    --border=rounded \
    --info=inline \
    --prompt='🔍 Quick CD: ' \
    --header='🎯 Recent & Current directories (Tab for multi-select)' \
    --preview-window='right:50%:wrap:hidden' \
    --preview '
      if [[ {} == ".." ]]; then
        target="$(dirname "$(pwd)")";
      elif [[ {} == /* ]]; then
        target="{}";
      else
        target="$(pwd)/{}";
      fi;
      echo "📂 Target: $target";
      echo;
      if [[ -d "$target" ]]; then
        ls -la --color=always "$target" 2>/dev/null | head -15;
      fi
    ' \
    --bind 'tab:toggle-preview' \
    --bind 'ctrl-/:change-preview-window(down|hidden|)' \
    --bind 'ctrl-y:execute-silent(echo -n {} | pbcopy)' \
    --bind 'alt-up:preview-page-up' \
    --bind 'alt-down:preview-page-down'

  if [[ -n "$dir" ]]; then
    if [[ "$dir" == ".." ]]; then
      builtin cd ..
    elif [[ "$dir" == /* ]]; then
      builtin cd "$dir"
    else
      builtin cd "$dir"
    fi
  fi
}

function cdt() {
  local selected_path

  if command -v tree >/dev/null 2>&1; then
    selected_path=$(tree -d -L 3 -a -I '.git' | fzf \
      --height=80% \
      --layout=reverse \
      --border=rounded \
      --ansi \
      --prompt='🌳 Tree Navigation: ' \
      --header='📁 Navigate directory tree' \
      --preview 'echo {} | sed "s/.*─ //" | xargs -I {} sh -c "if [[ -d \"{}\" ]]; then ls -la --color=always \"{}\"; fi"' \
      --preview-window='right:50%:wrap' \
      | sed 's/.*─ //')
  elif command -v fd >/dev/null 2>&1; then
    selected_path=$(fd -t d -d 3 | fzf \
      --height=70% \
      --layout=reverse \
      --border=rounded \
      --prompt='📁 Directory Search: ' \
      --preview 'ls -la --color=always {}' \
      --preview-window='right:50%:wrap')
  else
    selected_path=$(find . -type d -maxdepth 3 -not -path '*/\.*' | fzf \
      --height=70% \
      --layout=reverse \
      --border=rounded \
      --prompt='📁 Find Directories: ' \
      --preview 'ls -la --color=always {}' \
      --preview-window='right:50%:wrap')
  fi

  [[ -n "$selected_path" ]] && builtin cd "$selected_path"
}

function docker_remove_image(){
  local cid
  cid=$(docker images | fzf -q "$1" | awk '{print $3}')

  [ -n "$cid" ] && docker rmi -f "$cid"
}

function docker_stop() {
  local cid
  cid=$(docker ps | sed 1d | fzf -q "$1" | awk '{print $1}')

  [ -n "$cid" ] && docker stop "$cid"
}

man_finder() {
  man -k . | fzf --prompt='Man> ' | awk '{print $1}' | xargs -r man
}

function list_enviroments(){
  printenv | fzf --border
}

function count_files_by_exstension() {
  find $@ -type f | awk -F . '{print $NF}' | sort | uniq -c \
    | awk '{print $2,$1}' | fzf
}

function preview_file_finder() {
  find $@ -type f | fzf --preview="cat {-1}" --header-lines=1 --color=bg+:24 \
    --bind "alt-j:preview-down,alt-k:preview-up,ctrl-f:preview-page-down,ctrl-b:preview-page-up" \
    --inline-info --border --tabstop=2 --border
}

#Use only with root
function apt_finder_installer(){
  apt-cache search $@ | fzf -m --ansi --reverse --inline-info \
    | awk '{print $1}' | xargs -r apt-get install -y
}

function droidcam_up(){
    adb start-server
    droidcam-cli -v adb 4747
}

function kill_adb_server(){
  adb kill-server
}

function docker_remove_volumens(){
  docker volume ls -qf dangling=true | xargs -r docker volume rm
}

function git_activiy() {
  git for-each-ref --sort=-committerdate refs/remotes/azure --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) %(authoremail) - (%(color:green)%(committerdate:relative)%(color:reset))' --count=20
}

function git_change_branch(){
  git for-each-ref --sort='-authordate' --format='%1B[0;34m%(refname:short)%1B[m ===> %1B[1;35m%(subject)' refs/heads | sed -e 's-refs/heads/--' | fzf --ansi -m --reverse | awk '{print $1}' | xargs git checkout
}

git_add_patch_file(){
  git status --untracked-files=no | fzf --reverse | awk '{print $2}' | xargs git add -p
}

git_pull_current_branch(){
  git branch --show-current | xargs git pull $@
}

git_push_current_branch(){
  git branch --show-current | xargs git push $@
}
